Spring中的远程调用技术
	1.RMI（两端都要是java环境，相同版本）//优点:使用Java标准对象序列化机制,缺点:端口许愿哦穿透防火墙
	2.Canucho的Hessian（二进制格式）和Burlap（XML格式）//优点:都可以跨语言调用使用8080端口很好的解决了穿透防火墙的问题,缺点使用私有序列化
	3.Spring基于HTTP的远程服务(HttpInvoker)//集合了以上2者的优点,缺点:java平台使用
	4.使用JAX-RPC和JAX-WS的Web Service
	
	
	RMI
		在服务端
			@Bean
			public RmiServiceExporter rmiExporter(ImC imC){
				RmiServiceExporter rmiExporter=new RmiServiceExporter();
				rmiExporter.setService(imC);
				rmiExporter.setServiceName("ImC");
				rmiExporter.setServiceInterface(Im.class);
				//默认绑定到本机到本机的1099端口的RMI注册表
				//或使用下面代码绑定到其他主机的RMI注册表
				//rmiExporter.setRegistryHost("127.0.0.1");
				//rmiExporter.setRegistryPort(1199);
				return rmiExporter;
			}
		客户端
			 @Bean
			public RmiProxyFactoryBean ImCService(){
				RmiProxyFactoryBean rmiProxy=new RmiProxyFactoryBean();
				rmiProxy.setServiceUrl("rmi://localhost:1199/ImC");//服务端url
				rmiProxy.setServiceInterface(Im.class);//实现的接口（要在客户端定义接口）
				return rmiProxy;
			}
		调用
			直接注入接口的实例
			
	Hessian（！！在WebConfig中的configureDefaultServletHandling中的调用要注释掉）
		在服务端
			在DiService中的getServletMappings添加*.service映射
			@Bean
			public HessianServiceExporter hessianServiceExporterService(ImC imC){
				HessianServiceExporter exporter =new HessianServiceExporter();
				exporter.setService(imC);//imC为注入的要远程使用的类
				exporter.setServiceInterface(Im.class);//指定接口
				return exporter;
			}
			@Bean
			public HandlerMapping hessianMapping(){
				SimpleUrlHandlerMapping mapping=new SimpleUrlHandlerMapping();
				Properties mappings=new Properties();
				mappings.setProperty("/imc.service","hessianServiceExporterService");//映射url
				mapping.setMappings(mappings);
				return mapping;
			}
		在客户端
			@Bean
			public HessianProxyFactoryBean ImCService(){
				HessianProxyFactoryBean rmiProxy=new HessianProxyFactoryBean();
				rmiProxy.setServiceUrl("http://127.0.0.1:8080/im/imc.service");//服务端url
				rmiProxy.setServiceInterface(Im.class);//实现的接口（要在客户端定义接口）
				return rmiProxy;
			}
		调用
			直接注入接口的实例
			
	Burlap与Hessian相似（！！在WebConfig中的configureDefaultServletHandling中的调用要注释掉）
		在服务端hessianServiceExporterService的那个bean改为
			@Bean
			public BurlapServiceExporter burlapProxyFactory(ImC imC){
				BurlapServiceExporter burlapServiceException=new BurlapServiceExporter();
				burlapServiceException.setService(imC);
				burlapServiceException.setServiceInterface(Im.class);
				return burlapServiceException;
			}
		客户端
			HessianProxyFactoryBean改为BurlapProxyFactoryBean
	
	HttpInvoker与Hessian相似（！！在WebConfig中的configureDefaultServletHandling中的调用要注释掉）
		在服务端hessianServiceExporterService的那个bean改为
			@Bean
			public HttpInvokerServiceExporter burlapProxyFactory(ImC imC){
				HttpInvokerServiceExporter burlapServiceException=new HttpInvokerServiceExporter();
				burlapServiceException.setService(imC);
				burlapServiceException.setServiceInterface(Im.class);
				return burlapServiceException;
			}
		客户端
			HessianProxyFactoryBean改为HttpInvokerProxyFactoryBean
			
			
发布和使用WEB服务（利用JAX-WX）
	服务端
		webConfig.xml中
			@Bean
			public SimpleJaxWsServiceExporter jaxWsServiceExporter(){
				SimpleJaxWsServiceExporter exporter =new SimpleJaxWsServiceExporter();
				exporter.setBaseAddress("http://localhost:8888/services/");
				return exporter;
			}
		创建一个新的类
			@Component
			@WebService(serviceName = "Im")
			public class ImCService{
				@Autowired
				public Im im;
				@WebMethod
				public int getNumber(){
					System.out.println(444);
					return 88;
				}
			}
			
	客户端
		@Bean
		public JaxWsPortProxyFactoryBean ImCService() throws MalformedURLException {
			JaxWsPortProxyFactoryBean rmiProxy=new JaxWsPortProxyFactoryBean();
			URL url=new URL("http://localhost:8888/services/Im?wsdl");
			rmiProxy.setWsdlDocumentUrl(url);
			rmiProxy.setPortName("ImCServicePort");
			rmiProxy.setServiceName("Im");
			rmiProxy.setServiceInterface(Im.class);
			rmiProxy.setNamespaceUri("http://main/");
			return rmiProxy;
		}
			
			
			
			
			
			
			
			
			