java虚拟机运行时内存区域
	java堆（线程共享）
	
	方法区（线程共享）
	
	
	虚拟机栈（线程私有）
	
	本地方法栈（线程私有）
	
	程序计时器（线程私用）
	
		程序计时器
			当前线程所执行字节码的行号指示器
		
		虚拟机栈
			每个方法的执行都对应出栈和入账的过程，
			每个方法都会创建一个栈帧用于存储（局部变量表，操作数栈，动态连接，方法方法出口）
			在进入方法时栈帧的大小就完全确定
		
		本地方法栈
			和虚拟机栈发挥的作用非常相似
			虚拟机栈为java方法服务，本地方法栈为虚拟机使用到的Native方法服务
		
		java堆
			为对象实例分配内存
			虚拟机中内存最大的一块，垃圾回收的主要地方也称为（GC堆）
			
		方法区
			存储已被虚拟机加载的类信息，常量，静态变量
			运行时常量池
			
直接内存（不属于虚拟机运行时数据区的一部分）
	也会出现OutOfMemoryError异常在NIO等一些情况使用到
	受制于本机总内存
	
	
	
	
对象创建
	new指令
	->在常量池中查找是否又这个类的引用，并检查这个类是否已加载(没有则加载类)
	->在java堆中分配内存（类加载是便可确定大小）分配方式（如果内存空间绝对工整：指针碰撞，否则：维护一个空闲列表）
	

对象在内存中的布局
	对象头（header）
		1.对象自身的运行时数据
			哈希码，GC分代年龄，锁状态标志，线程持有的锁，线程偏向id，偏向时间戳等
		2.指向他的类的元数据的指针
			用于确定对象是哪个类的实例
			不一定有类型指针
			
	实例数据（Instance Data）//对象保存的数据
		
		
	对齐填充（Padding）//占位符作用
		对象大小必须为8字节的整数倍
	
	
访问对象时的定位（一般在虚拟机栈访问对象）
	使用句柄
		在java堆中维护句柄池，句柄中包含对象的实际地址信息，虚拟机栈中保存句柄的地址信息
		
	使用直接内存
		java栈中直接保存对象地址信息
		
		
		
		
虚拟机参数
	-Xms20m          //java堆最小值为20m
	-Xmx20m          //java堆最大值为20m
	-XX:+HeapDumpOnOutOfMemorError
	
	-Xss128k         //栈内存为128k
	
	-XX:PermSize=10m     //限制方法区大小
	-XX:MaxPermSize=10m  //限制方法区大小
	
	-XX:MaxDirectMemorySize=10  //MaxDirectMemory(直接内存大小) //直接内存溢出不会出现明显的异常
	