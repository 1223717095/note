java编译期其实是指3个编译过程
	1.前端编译器把.java文件转变为.class文件                              //对于程序编码比较重要（优化程序员效率）
	2.虚拟机的后端运行期编译器（JIT编译器）把.class文件转变为机器码      //对于程序运行比较重要（优化程序性能）
	3.静态提前编译器（AOT编译器）直接将.java转变为机器码
	
	
	
早期（编译器）优化            
	//利用java语法糖，优化程序的编写

	前端编译器
		//分为3个过程
			1.解析与填充符号表
			2.插入式注解处理器的注解处理过程
			3.分析与字节码生成过程
			
			解析与填充符号表
				1.词法，语法分析
					词法分析：将源代码的字符流转变为标记(Token)集合
					语法分析：根据Token序列构造抽象语法树（AST）的过程
					
				2.填充符号表
					符号表（Symbol Table）是由一组符号地址和符号信息构成的表格
					符号表在编译的不同阶段都会用到
						在语义分析阶段，用于语义检查
						在目标代码生成阶段，符号名进行地址分配的依据
						
			注解处理器
				如果注解处理器有对语法树进行修改，会回到解析与填充符号表过程重新处理
				
				
				
			分析与字节码生成过程
				语义分析：对语法分析生成的语法树进行逻辑检查
					1.标注检查
						包括变量使用前是否被声明，变量与赋值之间的数据类型是否能匹配
						常量折叠（例如：int a=1+会直接变成int a=3,不会增加CPU的运行负担）
					
					2.数据及控制流分析
						//对上下文逻辑更进一步的验证
					
					3.解语法糖
						
					4.字节码生成
						将实例构造器和类构造器添加到语法树中
						一些代码替换工作，用于优化程序的实现逻辑
						
						
早期优化（语法糖）
	泛型与类型擦除
	
	自动装箱，拆箱与遍历循环
	
	条件编译

				