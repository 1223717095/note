发布与逸出
	//发布对象：指的是，在当前作用域外使用该对象
	//逸出：发布了不应该发布的对象
	
	this引用逸出
		//
		//条件
			构造函数中创建内部类
			构造函数中就把这个内部类给发布了出去
		//或者是在构造函数中启动新线程	（可以用工厂构造方法解决）
		
		
		
线程封闭
	//当决定使用线程封闭技术时，通常是因为要将某个特定的子系统实现为一个单线程子系统。
	//不共享变量就不会出现线程安全问题
	//使用局部变量和ThreadLocal实现
	
	Ad-hoc线程封闭
		//指维护线程封闭性的职责完全由程序实现来承担。
		//Ad-hoc线程封闭是非常脆弱的，因为没有任何一种语言特性，例如可见性修饰符或局部变量，能将对象封闭到目标线程上。
		（应该使用下面2种方法）

	栈封闭
		//在方法中
		//在栈封闭中，只能通过局部变量才能访问对象。
		//栈封闭（也被称为线程内部使用或者线程局部使用）比Ad-hoc线程封闭更易于维护，也更加健壮。
		基本类型的局部变量始终封闭在线程内
		引用类型的变量确保不被发布，也具备栈封闭性
	
	ThreadLocal类
		//在线程中使用变量副本
		//使用ThreadLocal是实现线程封闭的最好方法
		
		
		
不变性
	//不可变对象一定是线程安全的
	//除非这个域是可变的，否则将其声明为final
	
	对象不可变条件
		创建后状态不能修改
		所有域都是final，引用类型不发布
		没有this逸出
		
安全发布（只是发布，使用时也要同步）
	可变对象的安全发布，必须使用同步
	
	方法
		在静态初始化函数中初始化一个对象引用
		将发布对象的引用存储到volatile域或者具有原子性的域中（如：java5.0中的AtomicReference）。 
		将发布对象引用存放到正确创建的对象的final域中。 
		将发布对象引用存放到由锁保护的域中（如：同步化的容器）
		
	如果要发布一个被静态创建的对象，最简单的方式就是使用静态初始化器，如下面代码所示：public static Holder holder=new Holder();静态初始化器由JVM在类初始化时执行，JVM在执行静态变量的初始化时会有内在同步保护，因此可以保证对象的安全发布。 	



事实不可变对象
	//从技术上看是可变的，但发布后状态不会在改变
	
	
发布
	不可变对象可以使用任意机制发布
	事实不可变对象必须通过安全方式发布
	可变对象必须通过安全方式发布，访问需要同步
	
















		
		
		
		
		
		
		
		
		
		
		
		